---
layout: post
title: Notes on the Micrel KSZ8041TL Ethernet transceiver
---

## Overview of Ethernet ##

Ethernet consists of a stack of software and hardware that transforms raw data into 100BASE-TX (802.3u) Ethernet frames. As data leaves the ARM processor, it is handed to Linux's mii driver. The driver, with the MAC controller hardware, wraps IP packets in Ethernet frames. The data then crosses the 4-bit bus to the Micrel chip. The Micrel chip, called "the physical layer" or PHY. The PHY takes in 4 bits in parallel and serializes them, so they can be sent out at 125 MHz. The controller on the ARM processor also has a serial side channel to communicate with the PHY-- a pair of lines, MDC and MDIO, which carry clock and data, respectively.

The PHY also takes care of negotiating between 10 Mbps and 100 Mbps Ethernet. The encoding details below pertain mostly to 100 Mbps Ethernet ("Fast Ethernet"); 10 Mbps Ethernet just uses Manchester encoding.

## Ethernet on the Rascal ##

The Rascal board uses the Micrel KSZ8041TL Ethernet transceiver. The ARM processor on the Rascal has a built-in Ethernet MAC ("Medium Access Control") that communicates with the Micrel chip with via the MII (Media Independent Interface). The MII consists of two 25 MHz 4-bit buses (nets ERX0:3 and ETX0:3), one dedicated to transmission, the other for reception.

## PHY encoding ##

As the data comes in for transmission, each set of 4 bits are encoded using [4B/5B bitstuffing][1]. This is to be certain that no matter what data you send, you always have bit transitions. The series of bits are then changed from NRZ to NRZI? and scrambled "to spread the power sprectrum." Then, they are encoded using the Multi-Level Transmit line code, [MLT-3][2]. Instead of encoding data using only two logical states (0 and 1), MLT-3 uses three states, represented by three different voltages: 1 V, ground, and -1 V. When the data to be transmitted is 1's, the output signal follows an oscillating pattern: 0, 1, 0, -1, 0, 1, 0, -1 , 0, and so on. When it's time to send a 0, the transmitter halts its oscillation, lingering in the most recent state for 1 bit time.

<a href="http://www.flickr.com/photos/pingswept/4590388838/">
<img src="http://farm5.static.flickr.com/4033/4590388838_d2129f0528_o.png" width="639" height="478" alt="Oscilloscope screenshot of Ethernet transmission" />
</a>

## Scrambling ##

Scrambling means XORing the outgoing data with a random, predetermined bitstream that is somehow generated by the polynomial x^9 + x ^11, as specified in ANSI X3T9.5.

## Hardware notes ##

The Micrel chip has its own 25 MHz crystal.

It takes in a 3.3 V supply. From that supply, it requires external filter components (2 capacitors and a ferrite bead) to create a filtered 3.3 V supply which it passes to an internal 1.8 V low noise regulator. This 1.8 V supply is then split with two separate but identical filters into supplies for digital and analog 1.8 V circuitry (see p. 31 of datasheet).

The transmit current is set by a resistor and capacitor attached to pin 16, REXT (see p. 10 of datasheet).

## Strap-in pins ##

There are two sets of configuration pins that are pulled high or low on reset to configure the PHY chip. CONFIG0:2 control which bus the device expects to use to communicate with the MAC controller. The 4-bit bus described above, MII, is the most common. It is selected by pulling all three CONFIG pins low with pull-down resistors. The mode is latched at reset.

The second set is the PHY address pins, PHYAD0:2. The PHY address allows a single MAC to control multiple PHY chips through a single MIIM bus. (No idea why you'd want more than 1 PHY-- maybe if you needed to switch between fiber and copper with the same device?) After reset, the same pins are also used to send Ethernet data to the MAC. The pins should get pull-downs or pull-ups so that the the MAC can't inadvertently set the PHY address, should its data inputs drive high before they are correctly configured as inputs.

[1]: http://en.wikipedia.org/wiki/4B5B
[2]: http://en.wikipedia.org/wiki/MLT-3_encoding
